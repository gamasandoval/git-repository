################################################################################
#### Configuration Section
################################################################################

# Title for the status page
MY_STATUS_TITLE="Ellucian Status Page"

# Link for the homepage button
#MY_HOMEPAGE_URL="https://github.com/Cyclenerd/static_status"
MY_HOMEPAGE_URL=""

# Text for the homepage button
MY_HOMEPAGE_TITLE=" "

# Auto refresh interval in seconds 0 is no refresh
MY_AUTOREFRESH="0"

# Shortcut to place the configuration file in a folder.
# Save it without / at the end.
MY_STATUS_CONFIG_DIR="/u01/app/statuspage"

# List with the configuration. What do we want to monitor?
MY_HOSTNAME_FILE="$MY_STATUS_CONFIG_DIR/status_hostname_list.txt"

# Script that can be triggered to create tickets or alerting
MY_ALERT_SCRIPT="$MY_STATUS_CONFIG_DIR/alert.sh"

# Tomcat webapps folder
MY_TOMCAT_HOME="/u01/app/appserver/tomcat/apache-tomcat-9.0.76/webapps/ROOT"

# Where should the HTML status page be stored?
MY_STATUS_HTML="$MY_TOMCAT_HOME/index.html"

# Where should the SVG status icon be stored?
MY_STATUS_ICON="$MY_TOMCAT_HOME/status.svg"
# Icon colors
MY_STATUS_ICON_COLOR_SUCCESS="lime"
MY_STATUS_ICON_COLOR_WARNING="orange"
MY_STATUS_ICON_COLOR_DANGER="red"

# Where should the JSON status page be stored? Set to "" to disable JSON output
MY_STATUS_JSON="$MY_TOMCAT_HOME/status.json"

# Text file in which you can place a status message.
# If the file exists and has a content, all errors on the status page are overwritten.
MY_MAINTENANCE_TEXT_FILE="$MY_STATUS_CONFIG_DIR/status_maintenance_text.txt"

# Duration we wait for response (nc, curl and traceroute).
MY_TIMEOUT="2"

# Duration we wait for response (only ping).
MY_PING_TIMEOUT="4"
MY_PING_COUNT="2"

# Duration we wait for response (only script).
MY_SCRIPT_TIMEOUT="20"

# Route to host
MY_TRACEROUTE_HOST="1.1.1.1" # Cloudflare DNS
# Sets the number of probe packets per hop
MY_TRACEROUTE_NQUERIES="1"

# Location for the status files. Please do not edit created files.
MY_HOSTNAME_STATUS_OK="$MY_STATUS_CONFIG_DIR/status_hostname_ok.txt"
MY_HOSTNAME_STATUS_DOWN="$MY_STATUS_CONFIG_DIR/status_hostname_down.txt"
MY_HOSTNAME_STATUS_LASTRUN="$MY_STATUS_CONFIG_DIR/status_hostname_last.txt"
MY_HOSTNAME_STATUS_DEGRADE="$MY_STATUS_CONFIG_DIR/status_hostname_degrade.txt"
MY_HOSTNAME_STATUS_LASTRUN_DEGRADE="$MY_STATUS_CONFIG_DIR/status_hostname_last_degrade.txt"
MY_HOSTNAME_STATUS_HISTORY="$MY_STATUS_CONFIG_DIR/status_hostname_history.txt"
MY_HOSTNAME_STATUS_HISTORY_TEMP_SORT="/tmp/status_hostname_history_sort.txt"

# Minimum downtime in seconds to display in past incidents
MY_MIN_DOWN_TIME="60"

# CSS Stylesheet for the status page
MY_STATUS_STYLESHEET=${MY_STATUS_STYLESHEET:-"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/css/bootstrap.min.css"}

# FontAwesome for the status page
MY_STATUS_FONTAWESOME=${MY_STATUS_FONTAWESOME:-"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"}

# A footer
MY_STATUS_FOOTER=${MY_STATUS_FOOTER:-'Powered by Ellucian Managed Services'}

# LOUD Colors
MY_GREEN='\033[0;32m'
MY_RED='\033[0;31m'
MY_CLEAR='\033[0m'

# Lock file to prevent duplicate execution.
# If this file exists, status.sh script is terminated.
# If something has gone wrong and the file has not been deleted automatically, you can delete it.
MY_STATUS_LOCKFILE="$MY_STATUS_CONFIG_DIR/STATUS_SH_IS_RUNNING.lock"

# Date format for the web page.
# UTC (`-u`) is the default.
# Example: 2021-12-23 12:34:55 UTC
# More details can be found in `man date`.
# Avoid semicolons.
MY_DATE_TIME=$(date "+%Y-%m-%d %H:%M:%S")

# Tip: You can tweak curl parameters via .curlrc config file.
#      The default curl config file is checked for in the following places in this order:
#        1. "$CURL_HOME/.curlrc"
#        2. "$HOME/.curlrc"
#
#      ~~~ Example .curlrc file ~~~
#      # this is a comment
#      # change the useragent string
#      -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0"
#      # ok if certification validation fails
#      --insecure
#      ~~~ End of example file ~~~

################################################################################
#### Function Section
################################################################################
##
# command_exists() tells if a given command exists.
function command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# check_bash() check if current shell is bash
function check_bash() {
	if [[ "$0" == *"bash" ]]; then
		exit_with_failure "Your current shell is $0"
	fi
}

# check_command() check if command exists and exit if not exists
function check_command() {
	if ! command_exists "$1"; then
		exit_with_failure "Command '$1' not found"
	fi
}

# check_config() check if the configuration file is readable
function check_config() {
	if [ ! -r "$1" ]; then
		exit_with_failure "Can not read required configuration file '$1'"
	fi
}

# check_file() check if the file exists if not create the file
function check_file() {
	if [ ! -f "$1" ]; then
		if ! echo > "$1"; then
			exit_with_failure "Can not create file '$1'"
		fi
	fi
	if [ ! -w "$1" ]; then
		exit_with_failure "Can not write file '$1'"
	fi
}

# exit_with_failure() outputs a message before exiting the script.
function exit_with_failure() {
	echo
	echo "FAILURE: $1"
	echo
	debug_variables
	echo
	del_lock
	exit 1
}

# echo_warning() outputs a warning message.
function echo_warning() {
	echo
	echo "WARNING: $1, will attempt to continue..."
	echo
}

# echo_do_not_edit() outputs a "do not edit" message to write to a file
function echo_do_not_edit() {
	echo "#"
	echo "# !!! Do not edit this file !!!"
	echo "#"
	echo "# To reset everything, delete the files:"
	echo "#     $MY_HOSTNAME_STATUS_OK"
	echo "#     $MY_HOSTNAME_STATUS_DOWN"
	echo "#     $MY_HOSTNAME_STATUS_LASTRUN"
	echo "#     $MY_HOSTNAME_STATUS_DEGRADE"
	echo "#     $MY_HOSTNAME_STATUS_LASTRUN_DEGRADE"
	echo "#     $MY_HOSTNAME_STATUS_HISTORY"
	echo "#"
}

# set_lock() sets lock file
function set_lock() {
	if ! echo "$MY_DATE_TIME" > "$MY_STATUS_LOCKFILE"; then
		exit_with_failure "Can not create lock file '$MY_STATUS_LOCKFILE'"
	fi
}

# del_lock() deletes lock file
function del_lock() {
	rm "$MY_STATUS_LOCKFILE" &> /dev/null
}

# check_lock() checks lock file and exit if the file exists
function check_lock() {
	if [ -f "$MY_STATUS_LOCKFILE" ]; then
		exit_with_failure "$ME is already running. Please wait... In case of problems simply delete the file: '$MY_STATUS_LOCKFILE'"
	fi
}
